{"version":3,"sources":["copmonent/Scrin.tsx","copmonent/Button.tsx","copmonent/Buttons.tsx","copmonent/Input.tsx","copmonent/SetButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Screen","props","className","value","maxValue","errorsValue","Button","onClick","disabled","isDisabled","title","Buttons","errorValue","startValue","onIncCount","onResetCount","Input","type","onChange","e","setMaxValue","Number","currentTarget","width","setStartValue","SetButton","setNumberHandler","App","useState","count","setCount","useEffect","countAsString","localStorage","getItem","newCount","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c816830.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\ntype ScreenType = {\r\n\r\n    value: number\r\n    maxValue: number\r\n    startValue:number\r\n    errorsValue: boolean\r\n}\r\nexport const Screen = (props: ScreenType) => {\r\n   return (\r\n       <div className= 'tablet-block'>\r\n           <div className={'tablet'}>\r\n            <span className={props.value === props.maxValue || props.errorsValue ? 'text-red' : 'text'\r\n            }>{props.errorsValue ? 'Error' : props.value} </span>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\ntype ButtonTypeProps = {\r\n    onClick: () => void\r\n    isDisabled:boolean\r\n    title:string\r\n}\r\n\r\nexport const Button = (props: ButtonTypeProps) => {\r\n\r\n    return (\r\n        <div className={'buttons'}>\r\n            <button\r\n                className={'button'}\r\n                onClick={props.onClick}\r\n                disabled={props.isDisabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype ButtonsTypeProps = {\r\n    value: number\r\n    onIncCount: () => void\r\n    onResetCount: () => void\r\n    maxValue: number\r\n    startValue: number\r\n\r\n}\r\n\r\nexport const Buttons = (props: ButtonsTypeProps) => {\r\n    let errorValue = props.maxValue < 0 || props.maxValue <= props.startValue || props.startValue < 0\r\n    let onIncCountHandler = () => {\r\n        props.onIncCount()\r\n    }\r\n    let onResetCountHandler = () => {\r\n        props.onResetCount()\r\n    }\r\n    return (\r\n        <div className='block'>\r\n            <div className='buttons-block'>\r\n                <Button onClick={onIncCountHandler} title={'Inc'}\r\n                        isDisabled={props.value === props.maxValue || errorValue}/>\r\n                <Button onClick={onResetCountHandler} title={'Reset'}\r\n                        isDisabled={props.value === props.startValue || errorValue}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\n\r\ntype InputTypeProps = {\r\n    maxValue: number\r\n    startValue: number\r\n    setMaxValue: (value: number) => void\r\n    setStartValue: (value: number) => void\r\n    errorsValue:boolean\r\n}\r\n\r\nexport const Input = (props: InputTypeProps) => {\r\n\r\n    let onChangeMaxNumber = (e: ChangeEvent<HTMLInputElement>,) => {\r\n        props.setMaxValue(Number(e.currentTarget.value))\r\n\r\n    }\r\n    let onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setStartValue(Number(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={'inputs-block'}>\r\n            <div className={'inputs-max'}>\r\n                <label className={'maxValue'} > maxValue : </label>\r\n                <input className={props.errorsValue ? 'inputs-red': 'inputs'} type=\"number\"\r\n                       value={props.maxValue} onChange={onChangeMaxNumber} width={ \"min-width: 1em\"}  />\r\n            </div>\r\n            <div className={'inputs-start'}>\r\n                <label className={'startValue'}> startValue : </label>\r\n                <input className={props.errorsValue ? 'inputs-red': 'inputs'} type=\"number\" value={props.startValue} onChange={onChangeStartValue}/></div>\r\n        </div>\r\n)\r\n}","import React from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype setButton = {\r\n    setNumberHandler: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    errorsValue:boolean\r\n}\r\n\r\n\r\nexport const SetButton = (props: setButton) => {\r\n    let onSetNumberHandler = () => {\r\n        props.setNumberHandler()\r\n    }\r\n    return (\r\n        <div className={'set-button'} >\r\n            <Button  onClick={onSetNumberHandler}\r\n                    isDisabled={props.errorsValue}\r\n                    title={'Set'}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Screen} from \"./copmonent/Scrin\";\r\nimport {Buttons} from \"./copmonent/Buttons\";\r\nimport {Input} from \"./copmonent/Input\";\r\nimport {SetButton} from \"./copmonent/SetButton\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    let [count, setCount] = useState(0)\r\n    let [maxValue, setMaxValue] = useState(5)\r\n    let [startValue, setStartValue] = useState(0)\r\n    // let [error, setError] = useState(\"\")\r\n    let errorsValue = maxValue < 0 || maxValue <= startValue || startValue < 0\r\n\r\n\r\n    useEffect(() => {\r\n        let countAsString = localStorage.getItem('maxValue')\r\n        if (countAsString) {\r\n            let newCount = JSON.parse(countAsString)\r\n            setMaxValue(newCount)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let countAsString = localStorage.getItem('startValue')\r\n        if (countAsString) {\r\n            let newCount = JSON.parse(countAsString)\r\n            setStartValue(newCount)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const onIncCount = () => {\r\n        setCount(count + 1);\r\n    }\r\n\r\n    const onResetCount = () => {\r\n        setCount(startValue)\r\n    }\r\n    const setNumberHandler = () => {\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n        localStorage.setItem('startValue', JSON.stringify(startValue))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'common-block'}>\r\n            <div className='counter'>\r\n                <Screen\r\n                    errorsValue={errorsValue}\r\n                    maxValue={maxValue}\r\n                    value={count}\r\n                    startValue={startValue}/>\r\n\r\n                <Buttons onIncCount={onIncCount}\r\n                         onResetCount={onResetCount}\r\n                         value={count}\r\n                         maxValue={maxValue}\r\n                         startValue={startValue}\r\n                /></div>\r\n\r\n            <div className={'settings-block'}>\r\n                <Input maxValue={maxValue}\r\n                       startValue={startValue}\r\n\r\n                       setMaxValue={setMaxValue}\r\n                       setStartValue={setStartValue}\r\n                       errorsValue={errorsValue}\r\n\r\n                />\r\n\r\n                <SetButton setNumberHandler={setNumberHandler}\r\n                           maxValue={maxValue}\r\n                           startValue={startValue}\r\n                           errorsValue={errorsValue}\r\n\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["copmonent/Scrin.tsx","copmonent/Button.tsx","copmonent/Buttons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Screen","props","className","value","maxValue","Button","onClick","disabled","isDisabled","title","Buttons","errorValue","startValue","onIncCount","onResetCount","App","useState","count","setCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2LAQaA,EAAS,SAACC,GACnB,OACI,qBAAKC,UAAW,SAAhB,SACI,uBAAMA,UAAWD,EAAME,QAAUF,EAAMG,SAAY,WAAa,OAAhE,UACKH,EAAME,MADX,UCHCE,EAAS,SAACJ,GAEnB,OACI,8BACI,wBACIC,UAAW,SACXI,QAASL,EAAMK,QACfC,SAAUN,EAAMO,WAHpB,SAIKP,EAAMQ,WCJVC,EAAU,SAACT,GACpB,IAAIU,EAAaV,EAAMG,SAAW,GAAKH,EAAMG,UAAYH,EAAMW,YAAcX,EAAMW,WAAa,EAOhG,OACI,qBAAKV,UAAU,QAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAAQI,QATI,WACpBL,EAAMY,cAQsCJ,MAAO,MACnCD,WAAYP,EAAME,QAAUF,EAAMG,UAAYO,IACtD,cAAC,EAAD,CAAQL,QARM,WACtBL,EAAMa,gBAOwCL,MAAO,QACrCD,WAAYP,EAAME,QAAUF,EAAMW,YAAcD,UCezDI,EAnCH,WACR,IADc,EAGUC,mBAAS,GAHnB,mBAGTC,EAHS,KAGFC,EAHE,KAed,OACI,8BACI,sBAAKhB,UAAU,UAAf,UACI,cAAC,EAAD,CACIE,SAlBD,EAmBCD,MAAOc,EACPL,WAnBC,IAqBL,cAAC,EAAD,CAASC,WAjBF,WACfK,EAASD,EAAQ,IAiBAH,aAdA,WACjBI,EATa,IAuBIf,MAAOc,EACPb,SAzBN,EA0BMQ,WAzBJ,UCIDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.448bd8b9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\ntype ScreenType = {\r\n    value: number\r\n    maxValue: number\r\n    startValue:number\r\n}\r\nexport const Screen = (props: ScreenType) => {\r\n    return (\r\n        <div className={'tablet'}>\r\n            <span className={props.value === props.maxValue  ? 'text-red' : 'text'\r\n            }>{  props.value  } </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\ntype ButtonTypeProps = {\r\n    onClick: () => void\r\n    isDisabled:boolean\r\n    title:string\r\n}\r\n\r\nexport const Button = (props: ButtonTypeProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={'button'}\r\n                onClick={props.onClick}\r\n                disabled={props.isDisabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype ButtonsTypeProps = {\r\n    value: number\r\n    onIncCount: () => void\r\n    onResetCount: () => void\r\n    maxValue: number\r\n    startValue: number\r\n\r\n}\r\n\r\nexport const Buttons = (props: ButtonsTypeProps) => {\r\n    let errorValue = props.maxValue < 0 || props.maxValue <= props.startValue || props.startValue < 0\r\n    let onIncCountHandler = () => {\r\n        props.onIncCount()\r\n    }\r\n    let onResetCountHandler = () => {\r\n        props.onResetCount()\r\n    }\r\n    return (\r\n        <div className='block'>\r\n            <div className='buttons-block'>\r\n                <Button onClick={onIncCountHandler} title={'Inc'}\r\n                        isDisabled={props.value === props.maxValue || errorValue}/>\r\n                <Button onClick={onResetCountHandler} title={'Reset'}\r\n                        isDisabled={props.value === props.startValue || errorValue}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Screen} from \"./copmonent/Scrin\";\r\nimport {Buttons} from \"./copmonent/Buttons\";\r\n\r\n\r\nconst App = () => {\r\n    let maxValue = 5;\r\n    let startValue = 0;\r\n    let [count, setCount] = useState(0)\r\n\r\n\r\n    const onIncCount = () => {\r\n        setCount(count + 1);\r\n    }\r\n\r\n    const onResetCount = () => {\r\n        setCount(startValue)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='counter'>\r\n                <Screen\r\n                    maxValue={maxValue}\r\n                    value={count}\r\n                    startValue={startValue}/>\r\n\r\n                <Buttons onIncCount={onIncCount}\r\n                         onResetCount={onResetCount}\r\n                         value={count}\r\n                         maxValue={maxValue}\r\n                         startValue={startValue}\r\n                /></div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}